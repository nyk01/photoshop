from PIL import Image 
import matplotlib.pyplot as plt
from skimage import io
import numpy as np22
import cv2


import sys #기본 라이브러리 설치x
from PySide6.QtGui import QAction, QImage, QPixmap
from PySide6.QtWidgets import (
    QApplication, QWidget, QLabel, QMainWindow, 
    QHBoxLayout, QVBoxLayout, QPushButton, QFileDialog
)






class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Simple Photoshop")
        self.setGeometry(70, 150, 800, 500)

        # 메뉴바 만들기
        self.menu = self.menuBar()
        self.menu_file = self.menu.addMenu("파일")
        exit = QAction("나가기", self, triggered=qApp.quit)
        exit.setShortcut("Ctrl+E")
        save = QAction("저장", self)
        save.setShortcut("Ctrl+S")
        #open = QAction("이미지 열기", self, triggered=qApp.show_file_dialog)
        #save.setShortcut("Ctrl+O")
        self.menu_file.addAction(exit)
        self.menu_file.addAction(save)
        #self.menu_file.addAction(open)
        
        self.menu_file_02 = self.menu.addMenu("편집")
        cut = QAction("자르기", self)
        self.menu_file_02.addAction(cut)

        self.menu_file_03 = self.menu.addMenu("설정")
        help = QAction("도움말", self, shortcut=QKeySequence(QKeySequence.HelpContents),
                        triggered=qApp.aboutQt)
        self.menu_file_03.addAction(help)
            
        # 메인화면 레이아웃
        main_layout = QHBoxLayout()

        # 사이드바 메뉴버튼
        sidebar = QVBoxLayout()
        button1 = QPushButton("이미지 열기")
        button2 = QPushButton("좌우반전")
        button3 = QPushButton("상하반전")
        button4 = QPushButton("새로고침")
        button5 = QPushButton("리셋")
        button6 = QPushButton("사이즈 축소")
        button7 = QPushButton("사이즈 확대")
        button8 = QPushButton("흑백")
        button9 = QPushButton("블러링")
        button10 = QPushButton("가우시안 블러링")
        button11 = QPushButton("미디언 블러링")
        button12 = QPushButton("볼록렌즈")
        button13 = QPushButton("오목렌즈")
        button14 = QPushButton("바이레터널 필터")
        button15 = QPushButton("경계 검출")
        button16 = QPushButton("로버츠 교차 필터")
        button17 = QPushButton("소벨 필터")
        
        button1.clicked.connect(self.show_file_dialog)
        button2.clicked.connect(self.flip_image)
        button3.clicked.connect(self.up_down_image)
        button4.clicked.connect(self.clear_label)
        button5.clicked.connect(self.reset_image)
        button6.clicked.connect(self.size_down)
        button7.clicked.connect(self.size_up)
        button8.clicked.connect(self.gray_image)
        button9.clicked.connect(self.blur)
        button10.clicked.connect(self.gaussian_blur)
        button11.clicked.connect(self.median_Blur)
        button12.clicked.connect(self.convex)
        button13.clicked.connect(self.concave)
        button14.clicked.connect(self.bilateral_filter)
        button15.clicked.connect(self.Boundary_detection)
        button16.clicked.connect(self.roberts_filter)
        button17.clicked.connect(self.sobel_filter)

        sidebar.addWidget(button1)
        sidebar.addWidget(button2)
        sidebar.addWidget(button3)
        sidebar.addWidget(button4)
        sidebar.addWidget(button5)
        sidebar.addWidget(button6)
        sidebar.addWidget(button7)
        sidebar.addWidget(button8)
        sidebar.addWidget(button9)
        sidebar.addWidget(button10)
        sidebar.addWidget(button11)
        sidebar.addWidget(button12)
        sidebar.addWidget(button13)
        sidebar.addWidget(button14)
        sidebar.addWidget(button15)
        sidebar.addWidget(button16)
        sidebar.addWidget(button17)
        
        main_layout.addLayout(sidebar)

        self.label1 = QLabel(self)
        self.label1.setFixedSize(640, 480)
        main_layout.addWidget(self.label1)

        self.label2 = QLabel(self)
        self.label2.setFixedSize(640, 480)
        main_layout.addWidget(self.label2)

        widget = QWidget(self)
        widget.setLayout(main_layout)
        self.setCentralWidget(widget)
    

    def show_file_dialog(self):
        file_name = QFileDialog.getOpenFileName(self, "이미지 열기", "./")
        self.image = cv2.imread(file_name[0])
        h, w, _ = self.image.shape
        bytes_per_line = 3 * w
        image = QImage(
            self.image.data, w, h, bytes_per_line, QImage.Format_RGB888
        ).rgbSwapped()
        pixmap = QPixmap(image)
        self.label1.setPixmap(pixmap)

        
    def flip_image(self):
        image = cv2.flip(self.image, 1)
        h, w, _ = image.shape
        bytes_per_line = 3 * w
        image = QImage(
            image.data, w, h, bytes_per_line, QImage.Format_RGB888
        ).rgbSwapped()
        pixmap = QPixmap(image)
        self.label2.setPixmap(pixmap)
        
        
    def up_down_image(self):
        image = cv2.flip(self.image, 0)
        h, w, _ = image.shape
        bytes_per_line = 3 * w
        image = QImage(
            image.data, w, h, bytes_per_line, QImage.Format_RGB888
        ).rgbSwapped()
        pixmap = QPixmap(image)
        self.label2.setPixmap(pixmap)

        
    def clear_label(self):
        self.label2.clear()
        
        
    def reset_image(self):
        self.label1.clear()
        self.label2.clear()
        
        
    def size_down(self):
        image = cv2.resize(self.image, dsize=(200, 200), interpolation=cv2.INTER_AREA)
        h, w, _ = image.shape
        bytes_per_line = 3 * w
        image = QImage(
            image.data, w, h, bytes_per_line, QImage.Format_RGB888
        ).rgbSwapped()
        pixmap = QPixmap(image)
        self.label1.setPixmap(pixmap)
        self.label2.setPixmap(pixmap)
        
        
    def size_up(self):
        image = cv2.resize(self.image, dsize=(400, 400), interpolation=cv2.INTER_LINEAR)
        h, w, _ = image.shape
        bytes_per_line = 3 * w
        image = QImage(
            image.data, w, h, bytes_per_line, QImage.Format_RGB888
        ).rgbSwapped()
        pixmap = QPixmap(image)
        self.label1.setPixmap(pixmap)
        self.label2.setPixmap(pixmap)
        
        
    def gray_image(self):
        image = cv2.cvtColor(self.image, cv2.COLOR_RGB2GRAY)
        h, w = image.shape
        bytes_per_line = 1 * w
        image = QImage(image.data, w, h, bytes_per_line, QImage.Format_Grayscale8)
        pixmap = QPixmap(image)
        self.label2.setPixmap(pixmap)
        
        
    def blur(self):
        kernel = np.full((5, 5), 0.04)
        image = cv2.filter2D(self.image, -1, kernel)
        
        h, w, _ = image.shape
        bytes_per_line = 3 * w
        image = QImage(
            image.data, w, h, bytes_per_line, QImage.Format_RGB888
        ).rgbSwapped()
        pixmap = QPixmap(image)
        self.label2.setPixmap(pixmap)
        
        
    def gaussian_blur(self):
        kernel = np.array([[1, 2, 1], [2, 4, 2], [1, 2, 1]]) * (1/ 16)
        image = cv2.filter2D(self.image, -1, kernel)

        h, w, _ = image.shape 
        bytes_per_line = 3 * w
        image = QImage(image.data, w, h, bytes_per_line, QImage.Format_RGB888).rgbSwapped()
        pixmap = QPixmap(image)
        self.label2.setPixmap(pixmap)  
        
    def median_Blur(self):
        image = cv2.medianBlur(self.image, 5)
        h, w, _ = image.shape 
        bytes_per_line = 3 * w
        image = QImage(image.data, w, h, bytes_per_line, QImage.Format_RGB888).rgbSwapped()
        pixmap = QPixmap(image)
        self.label2.setPixmap(pixmap)    
        
        
    def convex(self):
        h, w = self.image.shape[:2]
        exp = 3
        scale = 1.5
        mapy, mapx = np.indices((h, w), dtype=np.float32)

        mapx = 2 * mapx / (w - 1) -1
        mapy = 2 * mapy / (h - 1) -1

        r, theta = cv2.cartToPolar(mapx, mapy) 
        r[r < scale] = r[r < scale] ** exp 

        mapx, mapy = cv2.polarToCart(r, theta) 
        mapx = ((mapx + 1) * w - 1) / 2 
        mapy = ((mapy + 1) * h - 1) / 2 

        image = cv2.remap(self.image, mapx, mapy, cv2.INTER_LINEAR) 

        bytes_per_line = 3 * w
        image = QImage(image.data, w, h, bytes_per_line, QImage.Format_RGB888).rgbSwapped()
        pixmap = QPixmap(image)
        self.label2.setPixmap(pixmap)
    
    
    def concave(self):
        h, w = self.image.shape[:2]
        exp = 0.5
        scale = 1
        mapy, mapx = np.indices((h, w), dtype=np.float32)

        mapx = 2 * mapx / (w - 1) -1
        mapy = 2 * mapy / (h - 1) -1

        r, theta = cv2.cartToPolar(mapx, mapy) 
        r[r < scale] = r[r < scale] ** exp 

        mapx, mapy = cv2.polarToCart(r, theta) 
        mapx = ((mapx + 1) * w - 1) /2 
        mapy = ((mapy + 1) * h - 1) / 2 

        image = cv2.remap(self.image, mapx, mapy, cv2.INTER_LINEAR)

        bytes_per_line = 3 * w
        image = QImage(image.data, w, h, bytes_per_line, QImage.Format_RGB888).rgbSwapped()
        pixmap = QPixmap(image)
        self.label2.setPixmap(pixmap)
    
    
    def bilateral_filter(self):
        image = cv2.bilateralFilter(self.image, 5, 75, 75)
        h, w, _ = image.shape
        bytes_per_line = 3 * w
        image = QImage(image.data, w, h, bytes_per_line, QImage.Format_RGB888).rgbSwapped()
        pixmap = QPixmap(image)
        self.label2.setPixmap(pixmap)
    
    
    def Boundary_detection(self):
        gx_kernel = np.array([-1, 1])
        gy_kernel = np.array([[-1], [1]])
        
        edge_gx = cv2.filter2D(self.image, -1, gx_kernel)
        edge_gy = cv2.filter2D(self.image, -1, gy_kernel)
        
        image = edge_gx + edge_gy
        
        h, w, _ = image.shape 
        bytes_per_line = 3 * w
        image = QImage(image.data, w, h, bytes_per_line, QImage.Format_RGB888).rgbSwapped()
        pixmap = QPixmap(image)
        self.label2.setPixmap(pixmap)
        
        
    def roberts_filter(self):
        gx_kernel = np.array([[1, 0], [0, -1]])
        gy_kernel = np.array([[0, 1], [-1, 0]])

        edge_gx = cv2.filter2D(self.image, -1, gx_kernel)
        edge_gy = cv2.filter2D(self.image, -1, gy_kernel)
        
        image = edge_gx + edge_gy
        
        h, w, _ = image.shape
        bytes_per_line = 3 * w
        image = QImage(image.data, w, h, bytes_per_line, QImage.Format_RGB888).rgbSwapped()
        pixmap = QPixmap(image)
        self.label2.setPixmap(pixmap)
        
        
    def sobel_filter(self):
        gx_kernel = np.array([[-1, 0, 1],[-2, 0, 2], [-1, 0, 1]]) 
        gy_kernel = np.array([[-1, -2, -1],[0, 0, 0], [1, 2, 1]]) 

        edge_gx = cv2.filter2D(self.image, -1, gx_kernel)
        edge_gy = cv2.filter2D(self.image, -1, gy_kernel)

        image = edge_gx + edge_gy

        h, w, _ = image.shape
        bytes_per_line = 3 * w
        image = QImage(image.data, w, h, bytes_per_line, QImage.Format_RGB888).rgbSwapped()
        pixmap = QPixmap(image)
        self.label2.setPixmap(pixmap)
       
        
        
       
       
        
if __name__ == "__main__":
  app = QApplication()
  window = MainWindow()
  window.show()
  sys.exit(app.exec())

